#!/usr/bin/env bash

set -e
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps
shopt -s nocasematch # So that users can set true, True, or TRUE

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
SHORTEN_VCAP=${SHORTEN_VCAP:-"false"}
UPPERCASE=${UPPERCASE:-"true"}

echo "Parsing VCAP_SERVICES"

# Create script to hold export commands
cd $BUILD_DIR
mkdir -p .profile.d
touch .profile.d/parse.sh

# The jq version is old, so get the newer one
wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
chmod +x ./jq-linux64

# Find the number of user-provided services
LENGTH=$(echo $VCAP_SERVICES | ./jq-linux64 '.["user-provided"] | length')
echo "Found $LENGTH services"
LENGTH=$(($LENGTH - 1))

for n in $(seq 0 $LENGTH); do
  # The name of the service is nested in VCAP_SERVICES, so pull that out
  NAME=$(echo $VCAP_SERVICES | ./jq-linux64 -r --argjson n $n '.["user-provided"][$n]["name"]')
  echo "Getting settings for $NAME"

  # Find out how many keys are in this service
  KEYS_LENGTH=$(echo $VCAP_SERVICES | ./jq-linux64 -r --argjson n $n '.["user-provided"][$n]["credentials"] | keys | length')

  # Get each key-value pair and create an export statement
  KEYS_LENGTH=$(($KEYS_LENGTH - 1))
  for i in $(seq 0 $KEYS_LENGTH); do
    KEY="$(echo $VCAP_SERVICES | jq -r --argjson n $n --argjson i $i '.["user-provided"][$n]["credentials"] | keys[$i]')"
    VALUE="$(echo $VCAP_SERVICES | jq -r --argjson n $n --arg key $KEY '.["user-provided"][$n]["credentials"][$key]')"

    if [[ "$UPPERCASE" == "true" ]]; then
      # Convert KEY and NAME to uppercase
      KEY=${KEY^^}
      NAME=${NAME^^}
    fi

    # Create export statements
    if [[ "$SHORTEN_VCAP" == "true" ]]; then
      cmd="export \"${KEY}=${VALUE}\""
    else
      # Dashes cause failures for bash variables, so convert them
      cmd="export \"${NAME//-/_}_${KEY}=${VALUE}\""
    fi
    echo $cmd >> .profile.d/parse.sh
  done
done

rm ./jq-linux64
